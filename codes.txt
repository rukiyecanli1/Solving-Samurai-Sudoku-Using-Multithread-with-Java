***NewJFrame.java***

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package javaapplication12;

import java.awt.Color;
import java.awt.Font;
import java.awt.FontMetrics;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.Rectangle;
import java.awt.Shape;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.image.ImageObserver;
import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.Reader;
import static java.lang.Character.getNumericValue;
import java.text.AttributedCharacterIterator;
import java.util.Arrays;
import java.util.concurrent.TimeUnit;
import java.util.logging.Level;
import java.util.logging.Logger;
import static javaapplication12.MyThread.süreler;
import static javaapplication12.MyThread.süreler2;

import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javafx.application.Application;
import javafx.scene.Scene;
import javafx.scene.chart.CategoryAxis;
import javafx.scene.chart.LineChart;
import javafx.scene.chart.NumberAxis;
import javafx.scene.chart.XYChart;
import javafx.stage.Stage;
import org.jfree.ui.RefineryUtilities;

/**
 *
 * @author Lenovo
 */
public class NewJFrame extends javax.swing.JFrame {

    public static int[][] model1 = new int[9][9];
    public static int[][] model12 = new int[9][9];

    public static int[][] model2 = new int[9][9];
    public static int[][] model22 = new int[9][9];
    public static int[][] model3 = new int[9][9];
    public static int[][] model32 = new int[9][9];
    public static int[][] model4 = new int[9][9];
    public static int[][] model5 = new int[9][9];
    public static int[][] model42 = new int[9][9];
    public static int[][] model52 = new int[9][9];
    public static int[][] matris1 = new int[9][9];
    public static int[][] matris2 = new int[9][9];
    public static int[][] matris3 = new int[9][9];
    public static int[][] matris4 = new int[9][9];
    public static int[][] matris5 = new int[9][9];

    public static JTextField[][] cells1 = new JTextField[model1.length][model1.length];
    public static JTextField[][] cells12 = new JTextField[model1.length][model1.length];
    public static JTextField[][] cells2 = new JTextField[model2.length][model2.length];
    public static JTextField[][] cells3 = new JTextField[model2.length][model2.length];
    public static JTextField[][] cells4 = new JTextField[model1.length][model1.length];
    public static JTextField[][] cells5 = new JTextField[model1.length][model1.length];
    public static JTextField[][] cells22 = new JTextField[model2.length][model2.length];
    public static JTextField[][] cells32 = new JTextField[model2.length][model2.length];
    public static JTextField[][] cells42 = new JTextField[model1.length][model1.length];
    public static JTextField[][] cells52 = new JTextField[model1.length][model1.length];
    public static int a, b, c, d, e, f, g, h, i, j;
    public static long startTime = System.nanoTime();
    public static long startTime1 = System.nanoTime();
    public static long startTime2 = System.nanoTime();
    public static long startTime3 = System.nanoTime();
    public static long startTime4 = System.nanoTime();
    public static long startTime5 = System.nanoTime();

    /**
     * Creates new form NewJFrame
     */
    public NewJFrame() {

        initComponents();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setAlwaysOnTop(true);
        setBackground(new java.awt.Color(102, 102, 255));
        setForeground(new java.awt.Color(102, 102, 255));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(153, 153, 255));
        jPanel1.setPreferredSize(new java.awt.Dimension(200, 200));
        jPanel1.setLayout(new java.awt.GridLayout(9, 9));
        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 200, 200));

        jPanel5.setBackground(new java.awt.Color(153, 255, 255));
        jPanel5.setPreferredSize(new java.awt.Dimension(200, 200));
        jPanel5.setLayout(new java.awt.GridLayout(9, 9));
        getContentPane().add(jPanel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 390, 210, 190));

        jPanel4.setBackground(new java.awt.Color(255, 204, 204));
        jPanel4.setPreferredSize(new java.awt.Dimension(200, 200));
        jPanel4.setLayout(new java.awt.GridLayout(9, 9));
        getContentPane().add(jPanel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 390, 200, 190));

        jPanel3.setBackground(new java.awt.Color(204, 204, 255));
        jPanel3.setPreferredSize(new java.awt.Dimension(200, 200));
        jPanel3.setLayout(new java.awt.GridLayout(9, 9));
        getContentPane().add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 200, 200, 190));

        jPanel2.setBackground(new java.awt.Color(204, 153, 255));
        jPanel2.setPreferredSize(new java.awt.Dimension(200, 200));
        jPanel2.setLayout(new java.awt.GridLayout(9, 9));
        getContentPane().add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 0, 210, 200));

        jButton1.setBackground(new java.awt.Color(153, 255, 204));
        jButton1.setText("TEK BAŞLANGIÇ NOKTASI");
        jButton1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jButton1.setContentAreaFilled(false);
        jButton1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 280, 180, 50));

        jButton2.setBackground(new java.awt.Color(153, 153, 255));
        jButton2.setText("İKİ BAŞLANGIÇ NOKTASI");
        jButton2.setBorder(new javax.swing.border.MatteBorder(null));
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 270, 180, 50));

        jButton4.setText("GRAFİK GÖSTER");
        getContentPane().add(jButton4, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 460, 150, 50));

        jLabel1.setFont(new java.awt.Font("Nirmala UI Semilight", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 157, 124));
        jLabel1.setText("      SUDOKU");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 50, 200, 110));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) throws FileNotFoundException, IOException, InterruptedException {

        Reader reader = new FileReader("sudoku.txt");
        BufferedReader br = new BufferedReader(reader);
        String st;

        int a = 0;
        int j;

        for (j = 0; j < 9; j++) {
            st = br.readLine();
            st = replaceString(st);
            for (int i = 0; i < 9; i++) {
                a = getNumericValue(st.charAt(i));
                model1[j][i] = a;
                model12[j][i] = a;
                matris1[j][i] = a;
            }
        }

        br.close();
        reader.close();
        Reader reader2 = new FileReader("sudoku.txt");
        BufferedReader br2 = new BufferedReader(reader2);
        String st2;

        for (j = 0; j < 6; j++) {
            st2 = br2.readLine();
            st2 = replaceString(st2);
            for (int i = 9; i < 18; i++) {
                a = getNumericValue(st2.charAt(i));
                model2[j][i - 9] = a;
                model22[j][i - 9] = a;
                matris2[j][i - 9] = a;
            }
        }
        for (j = 6; j < 9; j++) {
            st2 = br2.readLine();
            st2 = replaceString(st2);
            for (int i = 12; i < 21; i++) {
                a = getNumericValue(st2.charAt(i));
                model2[j][i - 12] = a;
                model22[j][i - 12] = a;
                matris2[j][i - 12] = a;
            }
        }

        br2.close();
        reader2.close();
        Reader reader3 = new FileReader("sudoku.txt");
        BufferedReader br3 = new BufferedReader(reader3);
        String st3;

        st3 = br3.readLine();
        st3 = br3.readLine();
        st3 = br3.readLine();
        st3 = br3.readLine();
        st3 = br3.readLine();
        st3 = br3.readLine();

        for (j = 6; j < 9; j++) {
            st3 = br3.readLine();
            st3 = replaceString(st3);
            for (int i = 6; i < 15; i++) {
                a = getNumericValue(st3.charAt(i));
                model3[j - 6][i - 6] = a;
                model32[j - 6][i - 6] = a;
                matris3[j - 6][i - 6] = a;
            }
        }
        for (j = 9; j < 12; j++) {
            st3 = br3.readLine();
            st3 = replaceString(st3);
            for (int i = 0; i < 9; i++) {
                a = getNumericValue(st3.charAt(i));
                model3[j - 6][i] = a;
                model32[j - 6][i] = a;
                matris3[j - 6][i] = a;
            }
        }
        for (j = 12; j < 15; j++) {
            st3 = br3.readLine();
            st3 = replaceString(st3);
            for (int i = 6; i < 15; i++) {
                a = getNumericValue(st3.charAt(i));
                model3[j - 6][i - 6] = a;
                model32[j - 6][i - 6] = a;
                matris3[j - 6][i - 6] = a;
            }
        }

        br3.close();
        reader3.close();
        Reader reader4 = new FileReader("sudoku.txt");
        BufferedReader br4 = new BufferedReader(reader4);
        String st4;

        st4 = br4.readLine();
        st4 = br4.readLine();
        st4 = br4.readLine();
        st4 = br4.readLine();
        st4 = br4.readLine();
        st4 = br4.readLine();
        st4 = br4.readLine();
        st4 = br4.readLine();
        st4 = br4.readLine();
        st4 = br4.readLine();
        st4 = br4.readLine();
        st4 = br4.readLine();
        for (j = 0; j < 3; j++) {
            st4 = br4.readLine();
            st4 = replaceString(st4);
            for (int i = 0; i < 9; i++) {
                a = getNumericValue(st4.charAt(i));
                model4[j][i] = a;
                model42[j][i] = a;
                matris4[j][i] = a;
            }
        }
        for (j = 3; j < 9; j++) {
            st4 = br4.readLine();
            st4 = replaceString(st4);
            for (int i = 0; i < 9; i++) {
                a = getNumericValue(st4.charAt(i));
                model4[j][i] = a;
                model42[j][i] = a;
                matris4[j][i] = a;
            }
        }

        br4.close();
        reader4.close();
        Reader reader5 = new FileReader("sudoku.txt");
        BufferedReader br5 = new BufferedReader(reader5);
        String st5;

        st5 = br5.readLine();
        st5 = br5.readLine();
        st5 = br5.readLine();
        st5 = br5.readLine();
        st5 = br5.readLine();
        st5 = br5.readLine();
        st5 = br5.readLine();
        st5 = br5.readLine();
        st5 = br5.readLine();
        st5 = br5.readLine();
        st5 = br5.readLine();
        st5 = br5.readLine();
        for (j = 0; j < 3; j++) {
            st5 = br5.readLine();
            st5 = replaceString(st5);
            for (int i = 12; i < 21; i++) {
                a = getNumericValue(st5.charAt(i));
                model5[j][i - 12] = a;
                matris5[j][i - 12] = a;
                model52[j][i - 12] = a;
            }
        }
        for (j = 3; j < 9; j++) {
            st5 = br5.readLine();
            st5 = replaceString(st5);
            for (int i = 9; i < 18; i++) {
                a = getNumericValue(st5.charAt(i));
                model5[j][i - 9] = a;
                model5[j][i - 9] = a;
                model52[j][i - 9] = a;
            }
        }

        br5.close();
        reader5.close();
        draw(model1, cells1, jPanel1);
        draw(model2, cells2, jPanel2);
        draw(model3, cells3, jPanel3);
        draw(model4, cells4, jPanel4);
        draw(model5, cells5, jPanel5);
        String ileri = "ileri";
        String geri = "geri";

        MyThread m1 = new MyThread(model1, 0, 0, ileri);
        Thread t1 = new Thread(m1);
        MyThread m11 = new MyThread(model12, 0, 0, ileri);
        Thread t11 = new Thread(m11);

        MyThread m12 = new MyThread(model12, 8, 8, geri);
        Thread t12 = new Thread(m12);

        MyThread m2 = new MyThread(model2, 0, 0, ileri);
        Thread t2 = new Thread(m2);
        MyThread m21 = new MyThread(model22, 0, 0, ileri);
        Thread t21 = new Thread(m21);

        MyThread m22 = new MyThread(model22, 8, 8, geri);
        Thread t22 = new Thread(m22);

        MyThread m3 = new MyThread(model3, 0, 0, ileri);
        Thread t3 = new Thread(m3);
        MyThread m31 = new MyThread(model32, 0, 0, ileri);
        Thread t31 = new Thread(m31);

        MyThread m32 = new MyThread(model32, 8, 8, geri);
        Thread t32 = new Thread(m32);

        MyThread m4 = new MyThread(model4, 0, 0, ileri);
        Thread t4 = new Thread(m4);
        MyThread m41 = new MyThread(model42, 0, 0, ileri);
        Thread t41 = new Thread(m41);

        MyThread m42 = new MyThread(model42, 8, 8, geri);
        Thread t42 = new Thread(m42);

        MyThread m5 = new MyThread(model5, 0, 0, ileri);
        Thread t5 = new Thread(m5);
        MyThread m51 = new MyThread(model52, 0, 0, ileri);
        Thread t51 = new Thread(m51);

        MyThread m52 = new MyThread(model52, 8, 8, geri);
        Thread t52 = new Thread(m52);

        jButton1.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                t1.start();
                t2.start();
                t3.start();
                t4.start();
                t5.start();
            }

        });
        jButton2.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {

                t31.start();
                t41.start();
                t51.start();
                t12.start();
                t22.start();
                t32.start();
                t42.start();
                t52.start();
                t11.start();
                t21.start();
            }

        });
        jButton4.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                int counter1 = 0;
                int counter2 = 0;
                int counter3 = 0;
                int counter4 = 0;
                int counter5 = 0;

                for (int i = 0; i < matris1.length; i++) {
                    for (int k = 0; k < matris1.length; k++) {
                        if (matris1[i][k] == 0) {
                            counter1++;
                        }
                    }
                }
                for (int i = 0; i < matris2.length; i++) {
                    for (int k = 0; k < matris2.length; k++) {
                        if (matris2[i][k] == 0) {
                            counter2++;
                        }
                    }
                }
                for (int i = 0; i < matris3.length; i++) {
                    for (int k = 0; k < matris3.length; k++) {
                        if (matris3[i][k] == 0) {
                            counter3++;
                        }
                    }
                }
                for (int i = 0; i < matris4.length; i++) {
                    for (int k = 0; k < matris4.length; k++) {
                        if (matris4[i][k] == 0) {
                            counter4++;
                        }
                    }
                }
                for (int i = 0; i < matris5.length; i++) {
                    for (int k = 0; k < matris5.length; k++) {
                        if (matris5[i][k] == 0) {
                            counter5++;
                        }
                    }
                }
                System.out.println("c1=" + counter1 + "c2=" + counter3 + "c3=" + counter3 + "c4=" + counter4 + "c5=" + counter5);
                Arrays.sort(süreler);
                Arrays.sort(süreler2);
                int i = süreler[0];
                int i2 = süreler[1];
                int i3 = süreler[2];
                int i4 = süreler[3];
                int i5 = süreler[4];
                int i6 = süreler2[0] - süreler[4];
                int i7 = süreler2[1] - süreler[4];
                int i8 = süreler2[2] - süreler[4];
                int i9 = süreler2[3] - süreler[4];
                int i10 = süreler2[4] - süreler[4];
                String s1 = Integer.toString(counter1);
                String s2 = Integer.toString(counter1 + counter2);
                String s3 = Integer.toString(counter1 + counter2 + counter3);
                String s4 = Integer.toString(counter1 + counter2 + counter3 + counter4);
                String s5 = Integer.toString(counter1 + counter2 + counter3 + counter4 + counter5);
                System.out.println("süre=" + süreler[0] + "süre=" + süreler[1] + "süre=" + süreler[2] + "süre=" + süreler[3] + "süre=" + süreler[4]);
                System.out.println("süre=" + i6 + "süre=" + i7 + "süre=" + i8 + "süre=" + i9 + "süre=" + i10);
                
             /*   int time[]={i,i2,i3,i4,i5,i6,i7,i8,i9,i10};
                int cells[]={counter1,counter2,counter3,counter4,counter5};
                Graphic m =new Graphic(time,cells);
               // m.getData(i, i2, i3, i4, i5, i6, i7, i8, i9, i10, s1, s2, s3, s4, s5);
                JFrame f = new JFrame();
                f.add(m);
                f.setSize(850, 480);
                //f.setLayout(null);  
                f.setVisible(true);
                */

                 final Grafikedemo demo = new Grafikedemo("Line Chart Demo", i, i2, i3, i4, i5, i6, i7, i8, i9, i10, s1, s2, s3, s4, s5);
                 demo.pack();
                 RefineryUtilities.centerFrameOnScreen(demo);
                 demo.setVisible(true);
            }
        });
        /* Set the Nimbus look and feel 
           
        
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {

                new NewJFrame().setVisible(true);
            }
        });

    }

    public static void draw(int[][] board, JTextField[][] cells, JPanel JPanel1) {

        //JPanel1.setVisible(false);
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board.length; j++) {
                cells[i][j] = new JTextField();
                JPanel1.add(cells[i][j]);
                cells[i][j].setEditable(false);
                if (board[i][j] == 0) {
                    cells[i][j].setText("");
                } else {
                    cells[i][j].setText(String.valueOf(board[i][j]));
                }
                cells[i][j].setBackground(Color.darkGray);
                cells[i][j].setForeground(Color.CYAN);

                cells[i][j].setHorizontalAlignment(JTextField.CENTER);
                cells[i][j].setFont(new Font("Courier", Font.BOLD, 20));
            }

        }

    }

    public static String replaceString(String str) {
        return str.replaceAll("\\*", "0");
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private static final javax.swing.JButton jButton1 = new javax.swing.JButton();
    private static final javax.swing.JButton jButton2 = new javax.swing.JButton();
    private static final javax.swing.JButton jButton4 = new javax.swing.JButton();
    private javax.swing.JLabel jLabel1;
    public static final javax.swing.JPanel jPanel1 = new javax.swing.JPanel();
    public static final javax.swing.JPanel jPanel2 = new javax.swing.JPanel();
    public static final javax.swing.JPanel jPanel3 = new javax.swing.JPanel();
    public static final javax.swing.JPanel jPanel4 = new javax.swing.JPanel();
    protected static final javax.swing.JPanel jPanel5 = new javax.swing.JPanel();
    // End of variables declaration//GEN-END:variables
}

***MyThread.java***

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package javaapplication12;

/**
 *
 * @author Lenovo
 */
import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import static java.lang.String.valueOf;
import java.util.logging.Level;
import java.util.logging.Logger;
import static javaapplication12.NewJFrame.a;
import static javaapplication12.NewJFrame.b;
import static javaapplication12.NewJFrame.c;
import static javaapplication12.NewJFrame.cells1;
import static javaapplication12.NewJFrame.cells2;
import static javaapplication12.NewJFrame.cells3;
import static javaapplication12.NewJFrame.cells4;
import static javaapplication12.NewJFrame.cells5;
import static javaapplication12.NewJFrame.d;
import static javaapplication12.NewJFrame.e;
import static javaapplication12.NewJFrame.j;
import static javaapplication12.NewJFrame.i;
import static javaapplication12.NewJFrame.h;
import static javaapplication12.NewJFrame.f;
import static javaapplication12.NewJFrame.g;
import static javaapplication12.NewJFrame.model1;
import static javaapplication12.NewJFrame.model12;
import static javaapplication12.NewJFrame.model22;
import static javaapplication12.NewJFrame.model2;
import static javaapplication12.NewJFrame.model3;
import static javaapplication12.NewJFrame.model32;
import static javaapplication12.NewJFrame.model4;
import static javaapplication12.NewJFrame.model42;
import static javaapplication12.NewJFrame.model5;
import static javaapplication12.NewJFrame.model52;
import static javaapplication12.NewJFrame.startTime;
import static javaapplication12.NewJFrame.startTime1;
import static javaapplication12.NewJFrame.startTime2;
import static javaapplication12.NewJFrame.startTime3;
import static javaapplication12.NewJFrame.startTime4;
import static javaapplication12.NewJFrame.startTime5;


/**
 *
 * @author Lenovo
 */
public class MyThread implements Runnable {
    public static int[] süreler=new int[5];
    public static int[] süreler2=new int[5];

  public  PrintWriter myWriter;
  public  PrintWriter myWriter2;
  public  PrintWriter myWriter3;
  public  PrintWriter myWriter4;
  public  PrintWriter myWriter5;
   public  PrintWriter myWriter0;
  public  PrintWriter myWriter20;
  public  PrintWriter myWriter30;
  public  PrintWriter myWriter40;
  public  PrintWriter myWriter50;
  public  PrintWriter myWriterall;
   public  PrintWriter myWriterall0;
  
     int[][] sudoku;
    int row;
    int col;
    String direction;
    
  public MyThread(){
  
  }
    public MyThread(int[][] sudoku,int row,int col,String direction) throws FileNotFoundException{
        myWriter = new PrintWriter("çözüm.txt");
         myWriter2 = new PrintWriter("çözüm2.txt");
          myWriter3 = new PrintWriter("çözüm3.txt");
           myWriter4 = new PrintWriter("çözüm4.txt");
            myWriter5 = new PrintWriter("çözüm5.txt");
             myWriter0 = new PrintWriter("çözüm0.txt");
         myWriter20 = new PrintWriter("çözüm20.txt");
          myWriter30 = new PrintWriter("çözüm30.txt");
           myWriter40 = new PrintWriter("çözüm40.txt");
            myWriter50 = new PrintWriter("çözüm50.txt");
            myWriterall0 = new PrintWriter("çözümall0.txt");
            myWriterall = new PrintWriter("çözümall.txt");
          
        this.sudoku=sudoku;
        this.row=row;
        this.col=col;
        this.direction=direction;
    }
    protected synchronized void writetofile(int sudoku[][]) throws FileNotFoundException{

 
        if (sudoku == model1) {
           
             myWriter.print("model1\n");
             
         for (int row1 = 0; row1 < 9; row1++) {
                for (int col1 = 0; col1 < 9; col1++) {
                myWriter.print(model1[row1][col1]);
            
               
                }
             myWriter.print("\n");
            }
            
                  myWriter.println();
               }
        
      else  if (sudoku == model2) {
             myWriter2.print("model2\n");
         for (int row2 = 0; row2 < 9; row2++) {
                for (int col2 = 0; col2 < 9; col2++) {
                myWriter2.print(model2[row2][col2]);
             
               
                }
             myWriter2.print("\n");
            }
            
                  myWriter2.println();
             }
       else if (sudoku == model3) {
            myWriter3.print("model3\n");
         for (int row3 = 0; row3 < 9; row3++) {
                for (int col3 = 0; col3 < 9; col3++) {
                myWriter3.print(model3[row3][col3]);
             
               
                }
             myWriter3.print("\n");
            }
            
                  myWriter3.println();
               }
       else if (sudoku == model4) {
                    myWriter4.print("model4\n");
         for (int row4 = 0; row4 < 9; row4++) {
                for (int col4 = 0; col4 < 9; col4++) {
                myWriter4.print(model4[row4][col4]);
             
               
                }
             myWriter4.print("\n");
            }
            
                  myWriter4.println();
               }
      else if (sudoku == model5) {
                    myWriter5.print("model5\n");
         for (int row5 = 0; row5 < 9; row5++) {
                for (int col5 = 0; col5 < 9; col5++) {
                myWriter5.print(model5[row5][col5]);
             
               
                }
             myWriter5.print("\n");
            }
            
                  myWriter5.println();
               }
        else if (sudoku == model12) {
           
             myWriter0.print("model1\n");
             
         for (int row1 = 0; row1 < 9; row1++) {
                for (int col1 = 0; col1 < 9; col1++) {
                myWriter0.print(model12[row1][col1]);
            
               
                }
             myWriter0.print("\n");
            }
            
                  myWriter0.println();
               }
        
      else  if (sudoku == model22) {
             myWriter20.print("model2\n");
         for (int row2 = 0; row2 < 9; row2++) {
                for (int col2 = 0; col2 < 9; col2++) {
                myWriter20.print(model22[row2][col2]);
             
               
                }
             myWriter20.print("\n");
            }
            
                  myWriter20.println();
             }
       else if (sudoku == model32) {
            myWriter30.print("model3\n");
         for (int row3 = 0; row3 < 9; row3++) {
                for (int col3 = 0; col3 < 9; col3++) {
                myWriter30.print(model32[row3][col3]);
             
               
                }
             myWriter30.print("\n");
            }
            
                  myWriter30.println();
               }
       else if (sudoku == model42) {
                    myWriter40.print("model4\n");
         for (int row4 = 0; row4 < 9; row4++) {
                for (int col4 = 0; col4 < 9; col4++) {
                myWriter40.print(model42[row4][col4]);
             
               
                }
             myWriter40.print("\n");
            }
            
                  myWriter40.println();
               }
      else if (sudoku == model52) {
                    myWriter50.print("model5\n");
         for (int row5 = 0; row5 < 9; row5++) {
                for (int col5 = 0; col5 < 9; col5++) {
                myWriter50.print(model52[row5][col5]);
             
               
                }
             myWriter50.print("\n");
            }
            
                  myWriter50.println();
               }
    }
    
     protected synchronized  void updateView(int sudoku[][]) throws IOException, InterruptedException {
        
        
        if (sudoku == model1) {
          
             //  Thread.sleep(50);
                   
        
       
                
            for (int row = 0; row < 9; row++) {
                for (int col = 0; col < 9; col++) {
                    if (model1[row][col] != 0) {
                        cells1[row][col].setText(String.valueOf(model1[row][col]));
                    } else {
                        cells1[row][col].setText("");
                    }
                }
            }}
      else   if (sudoku == model12) {
         
             // Thread.sleep(50);    
                   
        
       
                
            for (int row = 0; row < 9; row++) {
                for (int col = 0; col < 9; col++) {
                    if (model12[row][col] != 0) {
                        cells1[row][col].setText(String.valueOf(model12[row][col]));
                    } else {
                        cells1[row][col].setText("");
                    }
                }
            }}
        else if (sudoku == model2) {
         //    Thread.sleep(50);
      
            for (int row = 0; row < 9; row++) {
                for (int col = 0; col < 9; col++) {
                    if (model2[row][col ] != 0) {
                        cells2[row][col].setText(String.valueOf(model2[row][col]));
                    } else {
                        cells2[row][col ].setText("");
                    }
                }
            }
        } 
         else if (sudoku == model22) {
             // Thread.sleep(50);
      
            for (int row = 0; row < 9; row++) {
                for (int col = 0; col < 9; col++) {
                    if (model22[row][col ] != 0) {
                        cells2[row][col].setText(String.valueOf(model22[row][col]));
                    } else {
                        cells2[row][col ].setText("");
                    }
                }
            }
        } 
       /* else if (sudoku == model3) {
         
            for (int row = 6; row < 9; row++) {
                for (int col = 9; col < 12; col++) {
                    if (model3[row -6][col - 6] != 0) {
                        cells3[row][col].setLabel(String.valueOf(model3[row - 6][col - 6]));
                    } else {
                       cells3[row][col].setLabel("");
                    }
                }
            }
        for(int row=9;row<12;row++){
        for(int col=6;col<15;col++){
        if(model3[row-6][col-6]!=0){
        cells3[row][col].setLabel(String.valueOf(model3[row - 6][col - 6]));
                    } else {
                        cells3[row][col].setLabel("");
                    }
        }
        }
        for(int row=12;row<15;row++){
        for(int col=9;col<12;col++){
        if(model3[row-6][col-6]!=0){
         cells3[row][col].setLabel(String.valueOf(model3[row - 6][col - 6]));
                    } else {
                        cells3[row][col].setLabel("");
                    }
        }
        }
            
            
        }
        */
        else if (sudoku == model3) {
            // Thread.sleep(50);
             
            for (int row = 0; row < 9; row++) {
                for (int col = 0; col < 9; col++) {
                    if (model3[row ][col] != 0) {
                        cells3[row][col].setText(String.valueOf(model3[row][col]));
                    } else {
                        cells3[row][col].setText("");
                    }
                }
            }
        }
         else if (sudoku == model32) {
             // Thread.sleep(50);
             
            for (int row = 0; row < 9; row++) {
                for (int col = 0; col < 9; col++) {
                    if (model32[row ][col] != 0) {
                        cells3[row][col].setText(String.valueOf(model32[row][col]));
                    } else {
                        cells3[row][col].setText("");
                    }
                }
            }
        }
        else if (sudoku == model4) {
            // Thread.sleep(50);
             
            for (int row = 0; row < 9; row++) {
                for (int col = 0; col < 9; col++) {
                    if (model4[row ][col] != 0) {
                        cells4[row][col].setText(String.valueOf(model4[row][col]));
                    } else {
                        cells4[row][col].setText("");
                    }
                }
            }
        } 
         else if (sudoku == model42) {
            //  Thread.sleep(50);
             
            for (int row = 0; row < 9; row++) {
                for (int col = 0; col < 9; col++) {
                    if (model42[row ][col] != 0) {
                        cells4[row][col].setText(String.valueOf(model42[row][col]));
                    } else {
                        cells4[row][col].setText("");
                    }
                }
            }
        }else if (sudoku == model5) {
           //  Thread.sleep(50);
         
              
            for (int row = 0; row < 9; row++) {
                for (int col = 0; col < 9; col++) {
                    if (model5[row ][col ] != 0) {
                        cells5[row][col].setText(String.valueOf(model5[row][col]));
                    } else {
                        cells5[row][col].setText("");
                    }
                }
            }
        }
else if (sudoku == model52) {
   //  Thread.sleep(50);
         
              
            for (int row = 0; row < 9; row++) {
                for (int col = 0; col < 9; col++) {
                    if (model52[row ][col ] != 0) {
                        cells5[row][col].setText(String.valueOf(model52[row][col]));
                    } else {
                        cells5[row][col].setText("");
                    }
                }
            }
        }
    }
  protected synchronized  boolean  row(int sudoku[][], int row, int num) {
     
        for (int col = 0; col < 9; col++) {
            if (sudoku[row][col] == num) {
                return false;
            }
        }

        return true;
    }

    /**
     * Checks if num is an acceptable value for the given column
     */
    protected synchronized  boolean column(int sudoku[][], int col, int num) {
        
        for (int row = 0; row < 9; row++) {
            if (sudoku[row][col] == num) {
                return false;
            }
        }

        return true;
    }

    /**
     * Checks if num is an acceptable value for the box around row and col
     */
    protected synchronized   boolean box(int sudoku[][], int row, int col, int num) {
     
        row = (row / 3) * 3;
        col = (col / 3) * 3;

        for (int r = 0; r < 3; r++) {
            for (int c = 0; c < 3; c++) {
                if (sudoku[row + r][col + c] == num) {
                    return false;
                }
            }
        }

        return true;
    }
    
    protected synchronized boolean isValid(int sudoku[][], int row, int col, int num) {
        
        return (row(sudoku, row, num)
                && column(sudoku, col, num)
                && box(sudoku, row, col, num));
    }

 
 public  void run() {
      //   MyThread ja = null;
        try {

            solve(sudoku, row, col, direction);

        } catch (Exception ex) {
            Logger.getLogger(MyThread.class.getName()).log(Level.SEVERE, null, ex);
        }
}

       
    
 
   public synchronized void solve(int sudoku[][], int row, int col, String direction) throws Exception {

       writetofile(sudoku);
        // Throw an exception to stop the process if the puzzle is solved
    
       switch (direction) {
            case "ileri":
        if (row > 8) {
            System.out.println("a="+a+"b="+b+"c="+c+"d="+d+"e="+e+"f="+f+"h="+h+"i="+i+"j="+j+"g="+g);
 
         if(sudoku==model1 || sudoku==model12){
              myWriter.close();
             System.out.println("model1 solve1 bitti");
      a = 1;
      if(sudoku==model1){
         long endTime1 = System.nanoTime();
 long timeElapsed1 = endTime1 - startTime1;
süreler[0]=   (int) (timeElapsed1/1000000000);}
      else if(sudoku==model12){
       long endTime12 = System.nanoTime();
 long timeElapsed12 = endTime12 - startTime1;
süreler2[0]=   (int) (timeElapsed12/1000000000);
      
      
      }
      
             System.out.println(süreler[0]);

         
         }
      if(sudoku==model2 || sudoku==model22){
          myWriter2.close();
             if(sudoku==model2){
         long endTime1 = System.nanoTime();
 long timeElapsed1 = endTime1 - startTime1;
süreler[1]=   (int) (timeElapsed1/1000000000);}
      else if(sudoku==model22){
       long endTime12 = System.nanoTime();
 long timeElapsed12 = endTime12 - startTime1;
süreler2[1]=   (int) (timeElapsed12/1000000000);
      
      
      }
      System.out.println(süreler[1]);
     b = 1;
}
     if(sudoku==model3 || sudoku==model32){
         myWriter3.close();
              if(sudoku==model3){
         long endTime1 = System.nanoTime();
 long timeElapsed1 = endTime1 - startTime1;
süreler[2]=   (int) (timeElapsed1/1000000000);}
      else if(sudoku==model32){
       long endTime12 = System.nanoTime();
 long timeElapsed12 = endTime12 - startTime1;
süreler2[2]=   (int) (timeElapsed12/1000000000);
      
      
      }
   System.out.println(süreler[2]);
       c = 1;
               }
        if(sudoku==model4 || sudoku==model42){
            myWriter4.close();
          d = 1;
          if(sudoku==model4){
         long endTime1 = System.nanoTime();
 long timeElapsed1 = endTime1 - startTime1;
süreler[3]=   (int) (timeElapsed1/1000000000);}
      else if(sudoku==model42){
       long endTime12 = System.nanoTime();
 long timeElapsed12 = endTime12 - startTime1;
süreler2[3]=   (int) (timeElapsed12/1000000000);
      
      
      }
   System.out.println(süreler[3]);
      
         }
        if(sudoku==model5 || sudoku==model52){
            myWriter5.close();
              e = 1;
        if(sudoku==model5){
         long endTime1 = System.nanoTime();
 long timeElapsed1 = endTime1 - startTime1;
süreler[4]=   (int) (timeElapsed1/1000000000);}
      else if(sudoku==model52){
       long endTime12 = System.nanoTime();
 long timeElapsed12 = endTime12 - startTime1;
süreler2[4]=   (int) (timeElapsed12/1000000000);
      
      
      }
  System.out.println(süreler[4]);
                  }
        if(a+b+c+d+e+f+h+i+j+g>=5){
              BufferedReader br = new BufferedReader(new FileReader("çözüm.txt"));
          String line = br.readLine();
      
        while (line != null)
        {
            myWriterall.println(line);
            line = br.readLine();
        }  
         BufferedReader br2 = new BufferedReader(new FileReader("çözüm2.txt"));
          
        String line2 = br2.readLine();
       
        while (line2 != null)
        {
            myWriterall.println(line2);
            line2 = br2.readLine();
        }     
         BufferedReader br3 = new BufferedReader(new FileReader("çözüm3.txt"));
          
        String line3 = br3.readLine();
       
        while (line3 != null)
        {
            myWriterall.println(line3);
            line3 = br3.readLine();
        }     
         BufferedReader br4 = new BufferedReader(new FileReader("çözüm4.txt"));
          
        String line4 = br4.readLine();
        
        while (line4 != null)
        {
            myWriterall.println(line4);
            line4 = br4.readLine();
        }     
         BufferedReader br5 = new BufferedReader(new FileReader("çözüm5.txt"));
          
        String line5 = br5.readLine();
          
     
        while (line5 != null)
        {
            myWriterall.println(line5);
            line5 = br5.readLine();
        }     
        myWriterall.flush();
        br.close();
        br2.close();
        br3.close();
        br4.close();
        br5.close();
        
             myWriterall.close();
              long endTime = System.nanoTime();
 long timeElapsed = endTime - startTime;
     
       //  System.exit(0);
         }
         
            throw new Exception("Solution found");}
        break;
       
       case "geri":
 if (row < 0) {
     System.out.println("a="+a+"b="+b+"c="+c+"d="+d+"e="+e+"f="+f+"h="+h+"i="+i+"j="+j+"g="+g);
          if(sudoku==model12){
           myWriter0.close();
      f = 1;
         long endTime12 = System.nanoTime();
 long timeElapsed12 = endTime12 - startTime1;
süreler2[0]=   (int) (timeElapsed12/1000000000);
        
         }
         if(sudoku==model22){
               myWriter20.close();
     g = 1;
      long endTime12 = System.nanoTime();
 long timeElapsed12 = endTime12 - startTime1;
süreler2[1]=   (int) (timeElapsed12/1000000000);

}
         if(sudoku==model32){
               myWriter30.close();
        long endTime12 = System.nanoTime();
 long timeElapsed12 = endTime12 - startTime1;
süreler2[2]=   (int) (timeElapsed12/1000000000);
      h = 1;
           }
         if(sudoku==model42){
               myWriter40.close();
      long endTime12 = System.nanoTime();
 long timeElapsed12 = endTime12 - startTime1;
süreler2[3]=   (int) (timeElapsed12/1000000000);
  i = 1;
             
         }
         if(sudoku==model52){
               myWriter50.close();
        long endTime12 = System.nanoTime();
 long timeElapsed12 = endTime12 - startTime1;
süreler2[4]=   (int) (timeElapsed12/1000000000);
      j = 1; 
         }
         if(a+b+c+d+e+f+h+i+j+g>=5){
             
               long endTime = System.nanoTime();
 long timeElapsed = endTime - startTime;
  BufferedReader br = new BufferedReader(new FileReader("çözüm0.txt"));
          
        String line = br.readLine();
     
        while (line != null)
        {
            myWriterall0.println(line);
            line = br.readLine();
        }  
         BufferedReader br2 = new BufferedReader(new FileReader("çözüm20.txt"));
          
        String line2 = br2.readLine();
      
        while (line2 != null)
        {
            myWriterall0.println(line2);
            line2 = br2.readLine();
        }     
         BufferedReader br3 = new BufferedReader(new FileReader("çözüm30.txt"));
          
        String line3 = br3.readLine();

        while (line3 != null)
        {
            myWriterall0.println(line3);
            line3 = br3.readLine();
        }     
         BufferedReader br4 = new BufferedReader(new FileReader("çözüm40.txt"));
          
        String line4 = br4.readLine();
   
        while (line4 != null)
        {
            myWriterall0.println(line4);
            line4 = br4.readLine();
        }     
         BufferedReader br5 = new BufferedReader(new FileReader("çözüm50.txt"));
          
        String line5 = br5.readLine();
          
     
        while (line5 != null)
        {
            myWriterall0.println(line5);
            line5 = br5.readLine();
        }     
        myWriterall0.flush();
        br.close();
        br2.close();
        br3.close();
        br4.close();
        br5.close();
        
             myWriterall0.close();
        // System.exit(0);
         }
            System.out.println("a="+a+"b="+b+"c="+c+"d="+d);
         
         throw new Exception("Solution found");
           
        }
    break;
        }

        // If the cell is not empty, continue with the next cell
        
        if (sudoku[row][col] != 0) {
        if ("ileri".equals(direction)) {
                if (col < 8) {

                    solve(sudoku, row, col + 1, direction);
       
        } else {
                    solve(sudoku, row + 1, 0, direction);   }
            } else if("geri".equals(direction)) {
                if (col > 0) {

                    solve(sudoku, row, col - 1, direction);
                } else {

                    solve(sudoku, row - 1, 8, direction);
                }
            }
        } else {
            // Find a valid number for the empty cell
            for (int num = 1; num < 10; num++) {
                if (isValid(sudoku,row,col,num)) {
                    sudoku[row][col] = num;
                    
                    updateView(sudoku);

                    // Let the observer see it
                // Thread.sleep(3);

                    // Delegate work on the next cell to a recursive call
                  if ("ileri".equals(direction)) {
                        if (col < 8) {

                            solve(sudoku, row, col + 1, direction);
                        } else {

                            solve(sudoku, row + 1, 0, direction);
                        }
                    } else if("geri".equals(direction)){
                        if (col > 0) {

                            solve(sudoku, row, col - 1, direction);
                        } else {

                            solve(sudoku, row - 1, 8, direction);
                        }
                    } 
                }
            }

            // No valid number was found, clean up and return to caller
            sudoku[row][col] = 0;
            updateView(sudoku);
        }
   }
}
    
 /*public synchronized   void solve2(int sudoku[][], int row2, int col2) throws Exception {
    writetofile(sudoku);
        // Throw an exception to stop the process if the puzzle is solved
        if (row2 < 0) {
            System.out.println("j="+j+"f="+f+"h="+h+"i="+i+"g="+g);
          if(sudoku==model12){
           myWriter0.close();
      f = 1;
         long endTime1 = System.nanoTime();
 long timeElapsed1 = endTime1 - startTime1;
        
         }
         if(sudoku==model22){
               myWriter20.close();
     g = 1;
       long endTime1 = System.nanoTime();
 long timeElapsed1 = endTime1 - startTime1;

}
         if(sudoku==model32){
               myWriter30.close();
       long endTime1 = System.nanoTime();
 long timeElapsed1 = endTime1 - startTime1;
      h = 1;
           }
         if(sudoku==model42){
               myWriter40.close();
       long endTime1 = System.nanoTime();
 long timeElapsed1 = endTime1 - startTime1;
  i = 1;
             
         }
         if(sudoku==model52){
               myWriter50.close();
       long endTime1 = System.nanoTime();
 long timeElapsed1 = endTime1 - startTime1;
      j = 1;  }
         if(a+b+c+d+e+f+h+i+j+g==5){
             System.out.println("girdiiiiiiiiiiiiii");
               long endTime = System.nanoTime();
 long timeElapsed = endTime - startTime;
  BufferedReader br = new BufferedReader(new FileReader("çözüm0.txt"));
          
        String line = br.readLine();
     
        while (line != null)
        {
            myWriterall0.println(line);
            line = br.readLine();
        }  
         BufferedReader br2 = new BufferedReader(new FileReader("çözüm20.txt"));
          
        String line2 = br2.readLine();
      
        while (line2 != null)
        {
            myWriterall0.println(line2);
            line2 = br2.readLine();
        }     
         BufferedReader br3 = new BufferedReader(new FileReader("çözüm30.txt"));
          
        String line3 = br3.readLine();

        while (line3 != null)
        {
            myWriterall0.println(line3);
            line3 = br3.readLine();
        }     
         BufferedReader br4 = new BufferedReader(new FileReader("çözüm40.txt"));
          
        String line4 = br4.readLine();
   
        while (line4 != null)
        {
            myWriterall0.println(line4);
            line4 = br4.readLine();
        }     
         BufferedReader br5 = new BufferedReader(new FileReader("çözüm50.txt"));
          
        String line5 = br5.readLine();
          
     
        while (line5 != null)
        {
            myWriterall0.println(line5);
            line5 = br5.readLine();
        }     
        myWriterall0.flush();
        br.close();
        br2.close();
        br3.close();
        br4.close();
        br5.close();
        
             myWriterall0.close();
        // System.exit(0);
         }
            System.out.println("a="+a+"b="+b+"c="+c+"d="+d);
         
         throw new Exception("Solution found");
           
        }

        // If the cell is not empty, continue with the next cell
        if (sudoku[row2][col2] != 0) {
           
            next2(sudoku, row2, col2);
        } else {
            // Find a valid number for the empty cell
            for (int num = 1; num < 10; num++) {
                if (checkRow(sudoku, row2, num) && checkCol(sudoku, col2, num) && checkBox(sudoku, row2, col2, num)) {
                    sudoku[row2][col2] = num;
                    updateView(sudoku);

                    // Let the observer see it
                  Thread.sleep(5);

                    // Delegate work on the next cell to a recursive call
                    next2(sudoku, row2, col2);
                }
            }

            // No valid number was found, clean up and return to caller
            sudoku[row2][col2] = 0;
            updateView(sudoku);
        }
    }
   /** Calls solve for the next cell */
   /* public void next(int sudoku[][], int row, int col) throws Exception {
     
        if (col < 8) {
             
            solve(sudoku, row, col + 1);
        } else {
          
            solve(sudoku, row + 1, 0);
        }
    }
   public  void  next2(int sudoku[][], int row, int col) throws Exception {
      
        if (col > 0) {
          
            solve2(sudoku, row, col -1);
        } else {
           
            solve2(sudoku, row -1, 8);
        }
    }*/
 

***Grafikedemo.java***

package javaapplication12;

import java.awt.Dimension;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.ui.ApplicationFrame;
import org.jfree.ui.RefineryUtilities;

public class Grafikedemo extends ApplicationFrame{
 
    public Grafikedemo(final String title, Number ss, Number süreler2, Number süreler3, Number süreler4, Number süreler5,Number süreler6, Number süreler7,Number süreler8,Number süreler9,Number süreler10,String type1,String type2,String type3,String type4,String type5) {
        
        super(title);
        final CategoryDataset veriler = veriler(ss,süreler2,süreler3,süreler4,süreler5,süreler6,süreler7,süreler8,süreler9,süreler10,type1,type2,type3,type4,type5);
        final JFreeChart chart = grafikolustur(veriler);
        final ChartPanel chartPanel = new ChartPanel(chart);
        chartPanel.setPreferredSize(new Dimension(800, 450));
        setContentPane(chartPanel);
    }

    private CategoryDataset veriler(Number ss, Number süreler2, Number süreler3, Number süreler4, Number süreler5,Number süreler6, Number süreler7,Number süreler8,Number süreler9,Number süreler10,String type1,String type2,String type3,String type4,String type5) {
      
        final String eleman1 = "Tek başlangıç";
        final String eleman2 = "Çift başlangıç";
      
        final DefaultCategoryDataset veriler = new DefaultCategoryDataset();
         veriler.addValue(0, eleman1,"0");
        veriler.addValue(ss, eleman1,type1);
        veriler.addValue(süreler2, eleman1, type2);
        veriler.addValue(süreler3, eleman1, type3);
        veriler.addValue(süreler4, eleman1, type4);
        veriler.addValue(süreler5, eleman1, type5);
        veriler.addValue(0, eleman2, "0");
        veriler.addValue(süreler6, eleman2, type1);
        veriler.addValue(süreler7, eleman2, type2);
        veriler.addValue(süreler8, eleman2, type3);
        veriler.addValue(süreler9, eleman2, type4);
        veriler.addValue(süreler10, eleman2, type5);
          return veriler;
                }
    
   
    private JFreeChart grafikolustur(final CategoryDataset veriler) {
        
       final JFreeChart grafik = ChartFactory.createLineChart(
            "Geçen Süre-Bulduğu Kare Grafiği",       
            "Kare",                    
            "Süre",                   
            veriler );
        return grafik;
    }
   
    public static void main(final String[] args){ 
        final Grafikedemo demo = new Grafikedemo("Line Chart Demo",5,10,15,20,25,10,17,28,30,45,"11","22","33","44","55");
        demo.pack();
        RefineryUtilities.positionFrameOnScreen(demo, BOTTOM_ALIGNMENT, RIGHT_ALIGNMENT);
        demo.setVisible(true);}

}

***JavaApplication12.java***

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package javaapplication12;

/**
 *
 * @author Lenovo
 */
public class JavaApplication12 {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        // TODO code application logic here
     
    }
    
}




